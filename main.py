import curses
import os
import random
import time


# –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ
def create_grid(rows, cols):
    grid = []
    for i in range(rows):
        row = []
        for j in range(cols):
            row.append(1 if random.random() < 0.2 else 0)
        grid.append(row)
    return grid


def count_population(grid):
    return sum(sum(row) for row in grid)


def get_population_stats(grid):
    total_cells = len(grid) * len(grid[0])
    alive = count_population(grid)
    percentage = (alive / total_cells) * 100 if total_cells > 0 else 0
    return alive, total_cells, percentage


# –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–µ
def print_grid(grid):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–∞ –≤ —Å–∏–º–≤–æ–ª—ã
    for row in grid:
        display_row = []
        for cell in row:
            if cell == 1:
                display_row.append('\033[92m‚ñ†\033[0m')  # –∂–∏–≤–∞—è –∫–ª–µ—Ç–∫–∞
            else:
                display_row.append(' ')  # –º–µ—Ä—Ç–≤–∞—è –∫–ª–µ—Ç–∫–∞
        print('|' + ''.join(display_row) + '|')


# —Å—á–∏—Ç–∞–µ–º —Å–æ—Å–µ–¥–µ–π
def count_neighbors(grid, row, col):
    rows = len(grid)  # –∫-–≤–æ —Å—Ç—Ä–æ–∫ –≤ grid
    cols = len(grid[0])  # –∫-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ grid (–¥–ª–∏–Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
    count = 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ 8 —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫
    for i in range(-1, 2):
        for j in range(-1, 2):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º—É –∫–ª–µ—Ç–∫—É
            if i == 0 and j == 0:
                continue

            # –≤—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Å–µ–¥–∞
            neighbor_row = (row + i) % rows
            neighbor_col = (col + j) % cols

            # –µ—Å–ª–∏ —Å–æ—Å–µ–¥ –∂–∏–≤–æ–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            if grid[neighbor_row][neighbor_col] == 1:
                count += 1
    return count


# next generation
def next_generation(grid):
    # rules
    # 1.–ñ–∏–≤–∞—è –∫–ª–µ—Ç–∫–∞ —Å 2-3 —Å–æ—Å–µ–¥—è–º–∏ –≤—ã–∂–∏–≤–∞–µ—Ç, –∏–Ω–∞—á–µ —É–º–∏—Ä–∞–µ—Ç
    # 2. –ú–µ—Ä—Ç–≤–∞—è –∫–ª–µ—Ç–∫–∞ —Å 3 —Å–æ—Å–µ–¥—è–º–∏ –æ–∂–∏–≤–∞–µ—Ç
    rows = len(grid)
    cols = len(grid[0])
    new_grid = create_grid(rows, cols)

    for i in range(rows):
        for j in range(cols):
            neighbors = count_neighbors(grid, i, j)
            if grid[i][j] == 1:
                if neighbors in [2, 3]:
                    new_grid[i][j] = 1
                else:
                    new_grid[i][j] = 0
            else:  # –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –º–µ—Ä—Ç–≤–∞—è
                if neighbors == 3:
                    new_grid[i][j] = 1  # –æ–∂–∏–≤–∞–µ—Ç
                else:
                    new_grid[i][j] = 0  # –æ—Å—Ç–∞–µ—Ç—Å—è –º–µ—Ä—Ç–≤–æ–π
    return new_grid


def main(stdscr):
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤
    curses.start_color()
    curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK),  # –∂–∏–≤—ã–µ –∫–ª–µ—Ç–∫–∏
    curses.init_pair(2, curses.COLOR_CYAN, curses.COLOR_BLACK),  # c—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    curses.init_pair(3, curses.COLOR_YELLOW, curses.COLOR_BLACK)  # –≥—Ä–∞—Ñ–∏–∫

    curses.curs_set(0)  # –°–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
    stdscr.nodelay(1)  # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤–≤–æ–¥
    stdscr.timeout(100)

    max_y, max_x = stdscr.getmaxyx()
    rows, cols = min(20, max_y - 8), min(40, max_x - 2)
    grid = create_grid(rows, cols)
    generation = 0
    speed = 0.1  # initial speed
    paused = False  # pause flag

    # –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    max_population = rows * cols

    speed_levels = [
        (0.01, "MAX üöÄ"),
        (0.02, "VERY FAST"),
        (0.05, "FAST"),
        (0.1, "NORMAL"),
        (0.2, "SLOW"),
        (0.5, "VERY SLOW"),
        (1.0, "üê¢"),
        (2.0, "MAX SLOW")
    ]

    cur_speed_index = 3

    def get_cur_speed():
        return speed_levels[cur_speed_index]

    while True:
        stdscr.clear()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å–µ–ª–µ–Ω–∏—è
        alive, total, percentage = get_population_stats(grid)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç—Å—Ç–∏—Å—Ç–∏–∫–∞
        status = 'PAUSED' if paused else 'RUNNING'
        cur_speed_value, cur_speed_name = get_cur_speed()

        stdscr.addstr(0, 0, f"üéÆ GAME OF LIFE | Gen: {generation} | Speed: {cur_speed_name}| Status {status}")
        stdscr.addstr(1, 0, f"üß¨ POPULATION: {alive}/{total} ({percentage:.1f}%)", curses.color_pair(2))
        stdscr.addstr(2, 0, f"Controls: [q]uit, [SPACE]pause,[+]faster, [-]slower, [r]eset")

        # –†–∏—Å—É–µ–º –ø–æ–ª–µ
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == 1:
                    stdscr.addstr(i + 3, j * 2, "‚ñà‚ñà", curses.color_pair(1))
                else:
                    stdscr.addstr(i + 3, j * 2, "  ")
        stdscr.refresh()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
        key = stdscr.getch()
        if key == ord('q'):
            break
        elif key == ord(' '):  # –ü—Ä–æ–±–µ–ª - –ø–∞—É–∑–∞/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            paused = not paused
        elif key == ord('+') or key == ord('='):  # —É–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å
            cur_speed_index = max(0, cur_speed_index - 1)
        elif key == ord('_') or key == ord('-'):
            cur_speed_index = min(len(speed_levels) - 1, cur_speed_index + 1)
        elif key == ord('r'):
            grid = create_grid(rows, cols)
            generation = 0
            cur_speed_index = 3
            paused = False

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ
        if not paused:
            grid = next_generation(grid)
            generation += 1
            time.sleep(cur_speed_value)
        else:
            # –ï—Å–ª–∏ –Ω–∞ –ø–∞—É–∑–µ, –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            time.sleep(0.1)


if __name__ == '__main__':
    curses.wrapper(main)
